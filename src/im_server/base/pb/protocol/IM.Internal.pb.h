// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eInternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eInternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eInternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eInternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace Internal {
class IMGetUserIdListByNickNameReq;
struct IMGetUserIdListByNickNameReqDefaultTypeInternal;
extern IMGetUserIdListByNickNameReqDefaultTypeInternal _IMGetUserIdListByNickNameReq_default_instance_;
class IMGetUserIdListByNickNameRsp;
struct IMGetUserIdListByNickNameRspDefaultTypeInternal;
extern IMGetUserIdListByNickNameRspDefaultTypeInternal _IMGetUserIdListByNickNameRsp_default_instance_;
class IMSyncAuthInfoReq;
struct IMSyncAuthInfoReqDefaultTypeInternal;
extern IMSyncAuthInfoReqDefaultTypeInternal _IMSyncAuthInfoReq_default_instance_;
class IMSyncAuthInfoRsp;
struct IMSyncAuthInfoRspDefaultTypeInternal;
extern IMSyncAuthInfoRspDefaultTypeInternal _IMSyncAuthInfoRsp_default_instance_;
}  // namespace Internal
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Internal::IMGetUserIdListByNickNameReq* Arena::CreateMaybeMessage<::IM::Internal::IMGetUserIdListByNickNameReq>(Arena*);
template<> ::IM::Internal::IMGetUserIdListByNickNameRsp* Arena::CreateMaybeMessage<::IM::Internal::IMGetUserIdListByNickNameRsp>(Arena*);
template<> ::IM::Internal::IMSyncAuthInfoReq* Arena::CreateMaybeMessage<::IM::Internal::IMSyncAuthInfoReq>(Arena*);
template<> ::IM::Internal::IMSyncAuthInfoRsp* Arena::CreateMaybeMessage<::IM::Internal::IMSyncAuthInfoRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Internal {

// ===================================================================

class IMSyncAuthInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Internal.IMSyncAuthInfoReq) */ {
 public:
  inline IMSyncAuthInfoReq() : IMSyncAuthInfoReq(nullptr) {}
  ~IMSyncAuthInfoReq() override;
  explicit constexpr IMSyncAuthInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMSyncAuthInfoReq(const IMSyncAuthInfoReq& from);
  IMSyncAuthInfoReq(IMSyncAuthInfoReq&& from) noexcept
    : IMSyncAuthInfoReq() {
    *this = ::std::move(from);
  }

  inline IMSyncAuthInfoReq& operator=(const IMSyncAuthInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSyncAuthInfoReq& operator=(IMSyncAuthInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSyncAuthInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMSyncAuthInfoReq* internal_default_instance() {
    return reinterpret_cast<const IMSyncAuthInfoReq*>(
               &_IMSyncAuthInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMSyncAuthInfoReq& a, IMSyncAuthInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSyncAuthInfoReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSyncAuthInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSyncAuthInfoReq* New() const final {
    return new IMSyncAuthInfoReq();
  }

  IMSyncAuthInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSyncAuthInfoReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IMSyncAuthInfoReq& from);
  void MergeFrom(const IMSyncAuthInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSyncAuthInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Internal.IMSyncAuthInfoReq";
  }
  protected:
  explicit IMSyncAuthInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kLatestTimeFieldNumber = 1,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 latest_time = 1;
  void clear_latest_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_time() const;
  void set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_time() const;
  void _internal_set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Internal.IMSyncAuthInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_time_;
  friend struct ::TableStruct_IM_2eInternal_2eproto;
};
// -------------------------------------------------------------------

class IMSyncAuthInfoRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Internal.IMSyncAuthInfoRsp) */ {
 public:
  inline IMSyncAuthInfoRsp() : IMSyncAuthInfoRsp(nullptr) {}
  ~IMSyncAuthInfoRsp() override;
  explicit constexpr IMSyncAuthInfoRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMSyncAuthInfoRsp(const IMSyncAuthInfoRsp& from);
  IMSyncAuthInfoRsp(IMSyncAuthInfoRsp&& from) noexcept
    : IMSyncAuthInfoRsp() {
    *this = ::std::move(from);
  }

  inline IMSyncAuthInfoRsp& operator=(const IMSyncAuthInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSyncAuthInfoRsp& operator=(IMSyncAuthInfoRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSyncAuthInfoRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMSyncAuthInfoRsp* internal_default_instance() {
    return reinterpret_cast<const IMSyncAuthInfoRsp*>(
               &_IMSyncAuthInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMSyncAuthInfoRsp& a, IMSyncAuthInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSyncAuthInfoRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSyncAuthInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSyncAuthInfoRsp* New() const final {
    return new IMSyncAuthInfoRsp();
  }

  IMSyncAuthInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSyncAuthInfoRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IMSyncAuthInfoRsp& from);
  void MergeFrom(const IMSyncAuthInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSyncAuthInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Internal.IMSyncAuthInfoRsp";
  }
  protected:
  explicit IMSyncAuthInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kAuthListFieldNumber = 2,
    kLatestTimeFieldNumber = 1,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.AuthInfo auth_list = 2;
  bool has_auth_list() const;
  private:
  bool _internal_has_auth_list() const;
  public:
  void clear_auth_list();
  const ::IM::BaseDefine::AuthInfo& auth_list() const;
  PROTOBUF_MUST_USE_RESULT ::IM::BaseDefine::AuthInfo* release_auth_list();
  ::IM::BaseDefine::AuthInfo* mutable_auth_list();
  void set_allocated_auth_list(::IM::BaseDefine::AuthInfo* auth_list);
  private:
  const ::IM::BaseDefine::AuthInfo& _internal_auth_list() const;
  ::IM::BaseDefine::AuthInfo* _internal_mutable_auth_list();
  public:
  void unsafe_arena_set_allocated_auth_list(
      ::IM::BaseDefine::AuthInfo* auth_list);
  ::IM::BaseDefine::AuthInfo* unsafe_arena_release_auth_list();

  // uint32 latest_time = 1;
  void clear_latest_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_time() const;
  void set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_time() const;
  void _internal_set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Internal.IMSyncAuthInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::AuthInfo* auth_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_time_;
  friend struct ::TableStruct_IM_2eInternal_2eproto;
};
// -------------------------------------------------------------------

class IMGetUserIdListByNickNameReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Internal.IMGetUserIdListByNickNameReq) */ {
 public:
  inline IMGetUserIdListByNickNameReq() : IMGetUserIdListByNickNameReq(nullptr) {}
  ~IMGetUserIdListByNickNameReq() override;
  explicit constexpr IMGetUserIdListByNickNameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetUserIdListByNickNameReq(const IMGetUserIdListByNickNameReq& from);
  IMGetUserIdListByNickNameReq(IMGetUserIdListByNickNameReq&& from) noexcept
    : IMGetUserIdListByNickNameReq() {
    *this = ::std::move(from);
  }

  inline IMGetUserIdListByNickNameReq& operator=(const IMGetUserIdListByNickNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetUserIdListByNickNameReq& operator=(IMGetUserIdListByNickNameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMGetUserIdListByNickNameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetUserIdListByNickNameReq* internal_default_instance() {
    return reinterpret_cast<const IMGetUserIdListByNickNameReq*>(
               &_IMGetUserIdListByNickNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMGetUserIdListByNickNameReq& a, IMGetUserIdListByNickNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetUserIdListByNickNameReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetUserIdListByNickNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetUserIdListByNickNameReq* New() const final {
    return new IMGetUserIdListByNickNameReq();
  }

  IMGetUserIdListByNickNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetUserIdListByNickNameReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IMGetUserIdListByNickNameReq& from);
  void MergeFrom(const IMGetUserIdListByNickNameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMGetUserIdListByNickNameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Internal.IMGetUserIdListByNickNameReq";
  }
  protected:
  explicit IMGetUserIdListByNickNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameListFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // string nick_name_list = 1;
  void clear_nick_name_list();
  const std::string& nick_name_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name_list();
  PROTOBUF_MUST_USE_RESULT std::string* release_nick_name_list();
  void set_allocated_nick_name_list(std::string* nick_name_list);
  private:
  const std::string& _internal_nick_name_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name_list(const std::string& value);
  std::string* _internal_mutable_nick_name_list();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Internal.IMGetUserIdListByNickNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  friend struct ::TableStruct_IM_2eInternal_2eproto;
};
// -------------------------------------------------------------------

class IMGetUserIdListByNickNameRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Internal.IMGetUserIdListByNickNameRsp) */ {
 public:
  inline IMGetUserIdListByNickNameRsp() : IMGetUserIdListByNickNameRsp(nullptr) {}
  ~IMGetUserIdListByNickNameRsp() override;
  explicit constexpr IMGetUserIdListByNickNameRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetUserIdListByNickNameRsp(const IMGetUserIdListByNickNameRsp& from);
  IMGetUserIdListByNickNameRsp(IMGetUserIdListByNickNameRsp&& from) noexcept
    : IMGetUserIdListByNickNameRsp() {
    *this = ::std::move(from);
  }

  inline IMGetUserIdListByNickNameRsp& operator=(const IMGetUserIdListByNickNameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetUserIdListByNickNameRsp& operator=(IMGetUserIdListByNickNameRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMGetUserIdListByNickNameRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetUserIdListByNickNameRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetUserIdListByNickNameRsp*>(
               &_IMGetUserIdListByNickNameRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMGetUserIdListByNickNameRsp& a, IMGetUserIdListByNickNameRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetUserIdListByNickNameRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetUserIdListByNickNameRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetUserIdListByNickNameRsp* New() const final {
    return new IMGetUserIdListByNickNameRsp();
  }

  IMGetUserIdListByNickNameRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetUserIdListByNickNameRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IMGetUserIdListByNickNameRsp& from);
  void MergeFrom(const IMGetUserIdListByNickNameRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMGetUserIdListByNickNameRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Internal.IMGetUserIdListByNickNameRsp";
  }
  protected:
  explicit IMGetUserIdListByNickNameRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserInfoListFieldNumber = 1,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.UserInfo user_info_list = 1;
  bool has_user_info_list() const;
  private:
  bool _internal_has_user_info_list() const;
  public:
  void clear_user_info_list();
  const ::IM::BaseDefine::UserInfo& user_info_list() const;
  PROTOBUF_MUST_USE_RESULT ::IM::BaseDefine::UserInfo* release_user_info_list();
  ::IM::BaseDefine::UserInfo* mutable_user_info_list();
  void set_allocated_user_info_list(::IM::BaseDefine::UserInfo* user_info_list);
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_info_list() const;
  ::IM::BaseDefine::UserInfo* _internal_mutable_user_info_list();
  public:
  void unsafe_arena_set_allocated_user_info_list(
      ::IM::BaseDefine::UserInfo* user_info_list);
  ::IM::BaseDefine::UserInfo* unsafe_arena_release_user_info_list();

  // @@protoc_insertion_point(class_scope:IM.Internal.IMGetUserIdListByNickNameRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::UserInfo* user_info_list_;
  friend struct ::TableStruct_IM_2eInternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMSyncAuthInfoReq

// uint32 latest_time = 1;
inline void IMSyncAuthInfoReq::clear_latest_time() {
  latest_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSyncAuthInfoReq::_internal_latest_time() const {
  return latest_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSyncAuthInfoReq::latest_time() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMSyncAuthInfoReq.latest_time)
  return _internal_latest_time();
}
inline void IMSyncAuthInfoReq::_internal_set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_time_ = value;
}
inline void IMSyncAuthInfoReq::set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_time(value);
  // @@protoc_insertion_point(field_set:IM.Internal.IMSyncAuthInfoReq.latest_time)
}

// optional bytes attach_data = 20;
inline bool IMSyncAuthInfoReq::_internal_has_attach_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMSyncAuthInfoReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void IMSyncAuthInfoReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IMSyncAuthInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMSyncAuthInfoReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMSyncAuthInfoReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Internal.IMSyncAuthInfoReq.attach_data)
}
inline std::string* IMSyncAuthInfoReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMSyncAuthInfoReq.attach_data)
  return _s;
}
inline const std::string& IMSyncAuthInfoReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSyncAuthInfoReq::_internal_set_attach_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMSyncAuthInfoReq::_internal_mutable_attach_data() {
  _has_bits_[0] |= 0x00000001u;
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMSyncAuthInfoReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMSyncAuthInfoReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attach_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMSyncAuthInfoReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMSyncAuthInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMSyncAuthInfoRsp

// uint32 latest_time = 1;
inline void IMSyncAuthInfoRsp::clear_latest_time() {
  latest_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSyncAuthInfoRsp::_internal_latest_time() const {
  return latest_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSyncAuthInfoRsp::latest_time() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMSyncAuthInfoRsp.latest_time)
  return _internal_latest_time();
}
inline void IMSyncAuthInfoRsp::_internal_set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_time_ = value;
}
inline void IMSyncAuthInfoRsp::set_latest_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_time(value);
  // @@protoc_insertion_point(field_set:IM.Internal.IMSyncAuthInfoRsp.latest_time)
}

// .IM.BaseDefine.AuthInfo auth_list = 2;
inline bool IMSyncAuthInfoRsp::_internal_has_auth_list() const {
  return this != internal_default_instance() && auth_list_ != nullptr;
}
inline bool IMSyncAuthInfoRsp::has_auth_list() const {
  return _internal_has_auth_list();
}
inline const ::IM::BaseDefine::AuthInfo& IMSyncAuthInfoRsp::_internal_auth_list() const {
  const ::IM::BaseDefine::AuthInfo* p = auth_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::IM::BaseDefine::AuthInfo&>(
      ::IM::BaseDefine::_AuthInfo_default_instance_);
}
inline const ::IM::BaseDefine::AuthInfo& IMSyncAuthInfoRsp::auth_list() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMSyncAuthInfoRsp.auth_list)
  return _internal_auth_list();
}
inline void IMSyncAuthInfoRsp::unsafe_arena_set_allocated_auth_list(
    ::IM::BaseDefine::AuthInfo* auth_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_list_);
  }
  auth_list_ = auth_list;
  if (auth_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Internal.IMSyncAuthInfoRsp.auth_list)
}
inline ::IM::BaseDefine::AuthInfo* IMSyncAuthInfoRsp::release_auth_list() {
  
  ::IM::BaseDefine::AuthInfo* temp = auth_list_;
  auth_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IM::BaseDefine::AuthInfo* IMSyncAuthInfoRsp::unsafe_arena_release_auth_list() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMSyncAuthInfoRsp.auth_list)
  
  ::IM::BaseDefine::AuthInfo* temp = auth_list_;
  auth_list_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::AuthInfo* IMSyncAuthInfoRsp::_internal_mutable_auth_list() {
  
  if (auth_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::AuthInfo>(GetArenaForAllocation());
    auth_list_ = p;
  }
  return auth_list_;
}
inline ::IM::BaseDefine::AuthInfo* IMSyncAuthInfoRsp::mutable_auth_list() {
  ::IM::BaseDefine::AuthInfo* _msg = _internal_mutable_auth_list();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMSyncAuthInfoRsp.auth_list)
  return _msg;
}
inline void IMSyncAuthInfoRsp::set_allocated_auth_list(::IM::BaseDefine::AuthInfo* auth_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_list_);
  }
  if (auth_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_list));
    if (message_arena != submessage_arena) {
      auth_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_list, submessage_arena);
    }
    
  } else {
    
  }
  auth_list_ = auth_list;
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMSyncAuthInfoRsp.auth_list)
}

// optional bytes attach_data = 20;
inline bool IMSyncAuthInfoRsp::_internal_has_attach_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMSyncAuthInfoRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void IMSyncAuthInfoRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IMSyncAuthInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMSyncAuthInfoRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMSyncAuthInfoRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Internal.IMSyncAuthInfoRsp.attach_data)
}
inline std::string* IMSyncAuthInfoRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMSyncAuthInfoRsp.attach_data)
  return _s;
}
inline const std::string& IMSyncAuthInfoRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSyncAuthInfoRsp::_internal_set_attach_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMSyncAuthInfoRsp::_internal_mutable_attach_data() {
  _has_bits_[0] |= 0x00000001u;
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMSyncAuthInfoRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMSyncAuthInfoRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attach_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMSyncAuthInfoRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMSyncAuthInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetUserIdListByNickNameReq

// string nick_name_list = 1;
inline void IMGetUserIdListByNickNameReq::clear_nick_name_list() {
  nick_name_list_.ClearToEmpty();
}
inline const std::string& IMGetUserIdListByNickNameReq::nick_name_list() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMGetUserIdListByNickNameReq.nick_name_list)
  return _internal_nick_name_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetUserIdListByNickNameReq::set_nick_name_list(ArgT0&& arg0, ArgT... args) {
 
 nick_name_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Internal.IMGetUserIdListByNickNameReq.nick_name_list)
}
inline std::string* IMGetUserIdListByNickNameReq::mutable_nick_name_list() {
  std::string* _s = _internal_mutable_nick_name_list();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMGetUserIdListByNickNameReq.nick_name_list)
  return _s;
}
inline const std::string& IMGetUserIdListByNickNameReq::_internal_nick_name_list() const {
  return nick_name_list_.Get();
}
inline void IMGetUserIdListByNickNameReq::_internal_set_nick_name_list(const std::string& value) {
  
  nick_name_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetUserIdListByNickNameReq::_internal_mutable_nick_name_list() {
  
  return nick_name_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetUserIdListByNickNameReq::release_nick_name_list() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMGetUserIdListByNickNameReq.nick_name_list)
  return nick_name_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetUserIdListByNickNameReq::set_allocated_nick_name_list(std::string* nick_name_list) {
  if (nick_name_list != nullptr) {
    
  } else {
    
  }
  nick_name_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name_list,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMGetUserIdListByNickNameReq.nick_name_list)
}

// optional bytes attach_data = 20;
inline bool IMGetUserIdListByNickNameReq::_internal_has_attach_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMGetUserIdListByNickNameReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void IMGetUserIdListByNickNameReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IMGetUserIdListByNickNameReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMGetUserIdListByNickNameReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetUserIdListByNickNameReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Internal.IMGetUserIdListByNickNameReq.attach_data)
}
inline std::string* IMGetUserIdListByNickNameReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMGetUserIdListByNickNameReq.attach_data)
  return _s;
}
inline const std::string& IMGetUserIdListByNickNameReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetUserIdListByNickNameReq::_internal_set_attach_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetUserIdListByNickNameReq::_internal_mutable_attach_data() {
  _has_bits_[0] |= 0x00000001u;
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetUserIdListByNickNameReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMGetUserIdListByNickNameReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attach_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetUserIdListByNickNameReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMGetUserIdListByNickNameReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetUserIdListByNickNameRsp

// .IM.BaseDefine.UserInfo user_info_list = 1;
inline bool IMGetUserIdListByNickNameRsp::_internal_has_user_info_list() const {
  return this != internal_default_instance() && user_info_list_ != nullptr;
}
inline bool IMGetUserIdListByNickNameRsp::has_user_info_list() const {
  return _internal_has_user_info_list();
}
inline const ::IM::BaseDefine::UserInfo& IMGetUserIdListByNickNameRsp::_internal_user_info_list() const {
  const ::IM::BaseDefine::UserInfo* p = user_info_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::IM::BaseDefine::UserInfo&>(
      ::IM::BaseDefine::_UserInfo_default_instance_);
}
inline const ::IM::BaseDefine::UserInfo& IMGetUserIdListByNickNameRsp::user_info_list() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMGetUserIdListByNickNameRsp.user_info_list)
  return _internal_user_info_list();
}
inline void IMGetUserIdListByNickNameRsp::unsafe_arena_set_allocated_user_info_list(
    ::IM::BaseDefine::UserInfo* user_info_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_list_);
  }
  user_info_list_ = user_info_list;
  if (user_info_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Internal.IMGetUserIdListByNickNameRsp.user_info_list)
}
inline ::IM::BaseDefine::UserInfo* IMGetUserIdListByNickNameRsp::release_user_info_list() {
  
  ::IM::BaseDefine::UserInfo* temp = user_info_list_;
  user_info_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMGetUserIdListByNickNameRsp::unsafe_arena_release_user_info_list() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMGetUserIdListByNickNameRsp.user_info_list)
  
  ::IM::BaseDefine::UserInfo* temp = user_info_list_;
  user_info_list_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMGetUserIdListByNickNameRsp::_internal_mutable_user_info_list() {
  
  if (user_info_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArenaForAllocation());
    user_info_list_ = p;
  }
  return user_info_list_;
}
inline ::IM::BaseDefine::UserInfo* IMGetUserIdListByNickNameRsp::mutable_user_info_list() {
  ::IM::BaseDefine::UserInfo* _msg = _internal_mutable_user_info_list();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMGetUserIdListByNickNameRsp.user_info_list)
  return _msg;
}
inline void IMGetUserIdListByNickNameRsp::set_allocated_user_info_list(::IM::BaseDefine::UserInfo* user_info_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_list_);
  }
  if (user_info_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_list));
    if (message_arena != submessage_arena) {
      user_info_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info_list, submessage_arena);
    }
    
  } else {
    
  }
  user_info_list_ = user_info_list;
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMGetUserIdListByNickNameRsp.user_info_list)
}

// optional bytes attach_data = 20;
inline bool IMGetUserIdListByNickNameRsp::_internal_has_attach_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMGetUserIdListByNickNameRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void IMGetUserIdListByNickNameRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IMGetUserIdListByNickNameRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Internal.IMGetUserIdListByNickNameRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetUserIdListByNickNameRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Internal.IMGetUserIdListByNickNameRsp.attach_data)
}
inline std::string* IMGetUserIdListByNickNameRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Internal.IMGetUserIdListByNickNameRsp.attach_data)
  return _s;
}
inline const std::string& IMGetUserIdListByNickNameRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetUserIdListByNickNameRsp::_internal_set_attach_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetUserIdListByNickNameRsp::_internal_mutable_attach_data() {
  _has_bits_[0] |= 0x00000001u;
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetUserIdListByNickNameRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Internal.IMGetUserIdListByNickNameRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attach_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetUserIdListByNickNameRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Internal.IMGetUserIdListByNickNameRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eInternal_2eproto
