// source: IM.Group.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.object.extend(proto, IM_BaseDefine_pb);
goog.exportSymbol('proto.IM.Group.IMGroupChangeMemberNotify', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupChangeMemberReq', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupChangeMemberRsp', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupCreateReq', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupCreateRsp', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupInfoListReq', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupInfoListRsp', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupShieldReq', null, global);
goog.exportSymbol('proto.IM.Group.IMGroupShieldRsp', null, global);
goog.exportSymbol('proto.IM.Group.IMNormalGroupListReq', null, global);
goog.exportSymbol('proto.IM.Group.IMNormalGroupListRsp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMNormalGroupListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Group.IMNormalGroupListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMNormalGroupListReq.displayName = 'proto.IM.Group.IMNormalGroupListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMNormalGroupListRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMNormalGroupListRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMNormalGroupListRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMNormalGroupListRsp.displayName = 'proto.IM.Group.IMNormalGroupListRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupInfoListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupInfoListReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupInfoListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupInfoListReq.displayName = 'proto.IM.Group.IMGroupInfoListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupInfoListRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupInfoListRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupInfoListRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupInfoListRsp.displayName = 'proto.IM.Group.IMGroupInfoListRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupCreateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupCreateReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupCreateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupCreateReq.displayName = 'proto.IM.Group.IMGroupCreateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupCreateRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupCreateRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupCreateRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupCreateRsp.displayName = 'proto.IM.Group.IMGroupCreateRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupChangeMemberReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupChangeMemberReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupChangeMemberReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupChangeMemberReq.displayName = 'proto.IM.Group.IMGroupChangeMemberReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupChangeMemberRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupChangeMemberRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupChangeMemberRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupChangeMemberRsp.displayName = 'proto.IM.Group.IMGroupChangeMemberRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupShieldReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Group.IMGroupShieldReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupShieldReq.displayName = 'proto.IM.Group.IMGroupShieldReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupShieldRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Group.IMGroupShieldRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupShieldRsp.displayName = 'proto.IM.Group.IMGroupShieldRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Group.IMGroupChangeMemberNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Group.IMGroupChangeMemberNotify.repeatedFields_, null);
};
goog.inherits(proto.IM.Group.IMGroupChangeMemberNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Group.IMGroupChangeMemberNotify.displayName = 'proto.IM.Group.IMGroupChangeMemberNotify';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMNormalGroupListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMNormalGroupListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMNormalGroupListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMNormalGroupListReq}
 */
proto.IM.Group.IMNormalGroupListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMNormalGroupListReq;
  return proto.IM.Group.IMNormalGroupListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMNormalGroupListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMNormalGroupListReq}
 */
proto.IM.Group.IMNormalGroupListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMNormalGroupListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMNormalGroupListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMNormalGroupListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMNormalGroupListReq} returns this
 */
proto.IM.Group.IMNormalGroupListReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMNormalGroupListReq} returns this
 */
proto.IM.Group.IMNormalGroupListReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMNormalGroupListReq} returns this
 */
proto.IM.Group.IMNormalGroupListReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMNormalGroupListReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMNormalGroupListRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMNormalGroupListRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMNormalGroupListRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMNormalGroupListRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupVersionListList: jspb.Message.toObjectList(msg.getGroupVersionListList(),
    IM_BaseDefine_pb.GroupVersionInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMNormalGroupListRsp}
 */
proto.IM.Group.IMNormalGroupListRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMNormalGroupListRsp;
  return proto.IM.Group.IMNormalGroupListRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMNormalGroupListRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMNormalGroupListRsp}
 */
proto.IM.Group.IMNormalGroupListRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.GroupVersionInfo;
      reader.readMessage(value,IM_BaseDefine_pb.GroupVersionInfo.deserializeBinaryFromReader);
      msg.addGroupVersionList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMNormalGroupListRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMNormalGroupListRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMNormalGroupListRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupVersionListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.GroupVersionInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMNormalGroupListRsp} returns this
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated IM.BaseDefine.GroupVersionInfo group_version_list = 2;
 * @return {!Array<!proto.IM.BaseDefine.GroupVersionInfo>}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.getGroupVersionListList = function() {
  return /** @type{!Array<!proto.IM.BaseDefine.GroupVersionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.GroupVersionInfo, 2));
};


/**
 * @param {!Array<!proto.IM.BaseDefine.GroupVersionInfo>} value
 * @return {!proto.IM.Group.IMNormalGroupListRsp} returns this
*/
proto.IM.Group.IMNormalGroupListRsp.prototype.setGroupVersionListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.GroupVersionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.GroupVersionInfo}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.addGroupVersionList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.GroupVersionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMNormalGroupListRsp} returns this
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.clearGroupVersionListList = function() {
  return this.setGroupVersionListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMNormalGroupListRsp} returns this
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMNormalGroupListRsp} returns this
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMNormalGroupListRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupInfoListReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupInfoListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupInfoListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupInfoListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupVersionListList: jspb.Message.toObjectList(msg.getGroupVersionListList(),
    IM_BaseDefine_pb.GroupVersionInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupInfoListReq}
 */
proto.IM.Group.IMGroupInfoListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupInfoListReq;
  return proto.IM.Group.IMGroupInfoListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupInfoListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupInfoListReq}
 */
proto.IM.Group.IMGroupInfoListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.GroupVersionInfo;
      reader.readMessage(value,IM_BaseDefine_pb.GroupVersionInfo.deserializeBinaryFromReader);
      msg.addGroupVersionList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupInfoListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupInfoListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupInfoListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupVersionListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.GroupVersionInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupInfoListReq} returns this
 */
proto.IM.Group.IMGroupInfoListReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated IM.BaseDefine.GroupVersionInfo group_version_list = 2;
 * @return {!Array<!proto.IM.BaseDefine.GroupVersionInfo>}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.getGroupVersionListList = function() {
  return /** @type{!Array<!proto.IM.BaseDefine.GroupVersionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.GroupVersionInfo, 2));
};


/**
 * @param {!Array<!proto.IM.BaseDefine.GroupVersionInfo>} value
 * @return {!proto.IM.Group.IMGroupInfoListReq} returns this
*/
proto.IM.Group.IMGroupInfoListReq.prototype.setGroupVersionListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.GroupVersionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.GroupVersionInfo}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.addGroupVersionList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.GroupVersionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupInfoListReq} returns this
 */
proto.IM.Group.IMGroupInfoListReq.prototype.clearGroupVersionListList = function() {
  return this.setGroupVersionListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupInfoListReq} returns this
 */
proto.IM.Group.IMGroupInfoListReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupInfoListReq} returns this
 */
proto.IM.Group.IMGroupInfoListReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupInfoListReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupInfoListRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupInfoListRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupInfoListRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupInfoListRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupInfoListList: jspb.Message.toObjectList(msg.getGroupInfoListList(),
    IM_BaseDefine_pb.GroupInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupInfoListRsp}
 */
proto.IM.Group.IMGroupInfoListRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupInfoListRsp;
  return proto.IM.Group.IMGroupInfoListRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupInfoListRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupInfoListRsp}
 */
proto.IM.Group.IMGroupInfoListRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.GroupInfo;
      reader.readMessage(value,IM_BaseDefine_pb.GroupInfo.deserializeBinaryFromReader);
      msg.addGroupInfoList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupInfoListRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupInfoListRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupInfoListRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupInfoListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.GroupInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupInfoListRsp} returns this
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated IM.BaseDefine.GroupInfo group_info_list = 2;
 * @return {!Array<!proto.IM.BaseDefine.GroupInfo>}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.getGroupInfoListList = function() {
  return /** @type{!Array<!proto.IM.BaseDefine.GroupInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.GroupInfo, 2));
};


/**
 * @param {!Array<!proto.IM.BaseDefine.GroupInfo>} value
 * @return {!proto.IM.Group.IMGroupInfoListRsp} returns this
*/
proto.IM.Group.IMGroupInfoListRsp.prototype.setGroupInfoListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.GroupInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.GroupInfo}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.addGroupInfoList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.GroupInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupInfoListRsp} returns this
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.clearGroupInfoListList = function() {
  return this.setGroupInfoListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupInfoListRsp} returns this
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupInfoListRsp} returns this
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupInfoListRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupCreateReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupCreateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupCreateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupCreateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupCreateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupAvatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    memberIdListList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupCreateReq}
 */
proto.IM.Group.IMGroupCreateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupCreateReq;
  return proto.IM.Group.IMGroupCreateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupCreateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupCreateReq}
 */
proto.IM.Group.IMGroupCreateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.GroupType} */ (reader.readEnum());
      msg.setGroupType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupAvatar(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMemberIdList(values[i]);
      }
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupCreateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupCreateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupCreateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupCreateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupAvatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMemberIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IM.BaseDefine.GroupType group_type = 2;
 * @return {!proto.IM.BaseDefine.GroupType}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getGroupType = function() {
  return /** @type {!proto.IM.BaseDefine.GroupType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.IM.BaseDefine.GroupType} value
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.setGroupType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string group_name = 3;
 * @return {string}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string group_avatar = 4;
 * @return {string}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getGroupAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.setGroupAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated uint32 member_id_list = 5;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getMemberIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.setMemberIdListList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.addMemberIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.clearMemberIdListList = function() {
  return this.setMemberIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupCreateReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupCreateReq} returns this
 */
proto.IM.Group.IMGroupCreateReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupCreateReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupCreateRsp.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupCreateRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupCreateRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupCreateRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userIdListList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupCreateRsp}
 */
proto.IM.Group.IMGroupCreateRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupCreateRsp;
  return proto.IM.Group.IMGroupCreateRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupCreateRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupCreateRsp}
 */
proto.IM.Group.IMGroupCreateRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUserIdList(values[i]);
      }
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupCreateRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupCreateRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupCreateRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResultCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 result_code = 2;
 * @return {number}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.setResultCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 group_id = 3;
 * @return {number}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.setGroupId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.clearGroupId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string group_name = 4;
 * @return {string}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated uint32 user_id_list = 5;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getUserIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.setUserIdListList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.addUserIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.clearUserIdListList = function() {
  return this.setUserIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupCreateRsp} returns this
 */
proto.IM.Group.IMGroupCreateRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupCreateRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupChangeMemberReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupChangeMemberReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupChangeMemberReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupChangeMemberReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    changeType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    memberIdListList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupChangeMemberReq}
 */
proto.IM.Group.IMGroupChangeMemberReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupChangeMemberReq;
  return proto.IM.Group.IMGroupChangeMemberReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupChangeMemberReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupChangeMemberReq}
 */
proto.IM.Group.IMGroupChangeMemberReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.GroupModifyType} */ (reader.readEnum());
      msg.setChangeType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMemberIdList(values[i]);
      }
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupChangeMemberReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupChangeMemberReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupChangeMemberReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChangeType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMemberIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IM.BaseDefine.GroupModifyType change_type = 2;
 * @return {!proto.IM.BaseDefine.GroupModifyType}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getChangeType = function() {
  return /** @type {!proto.IM.BaseDefine.GroupModifyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.IM.BaseDefine.GroupModifyType} value
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.setChangeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 group_id = 3;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated uint32 member_id_list = 4;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getMemberIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.setMemberIdListList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.addMemberIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.clearMemberIdListList = function() {
  return this.setMemberIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupChangeMemberReq} returns this
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupChangeMemberReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupChangeMemberRsp.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupChangeMemberRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupChangeMemberRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupChangeMemberRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    changeType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    curUserIdListList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    chgUserIdListList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp}
 */
proto.IM.Group.IMGroupChangeMemberRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupChangeMemberRsp;
  return proto.IM.Group.IMGroupChangeMemberRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupChangeMemberRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp}
 */
proto.IM.Group.IMGroupChangeMemberRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.GroupModifyType} */ (reader.readEnum());
      msg.setChangeType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCurUserIdList(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addChgUserIdList(values[i]);
      }
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupChangeMemberRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupChangeMemberRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupChangeMemberRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChangeType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResultCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCurUserIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getChgUserIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IM.BaseDefine.GroupModifyType change_type = 2;
 * @return {!proto.IM.BaseDefine.GroupModifyType}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getChangeType = function() {
  return /** @type {!proto.IM.BaseDefine.GroupModifyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.IM.BaseDefine.GroupModifyType} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setChangeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 result_code = 3;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setResultCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 group_id = 4;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated uint32 cur_user_id_list = 5;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getCurUserIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setCurUserIdListList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.addCurUserIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.clearCurUserIdListList = function() {
  return this.setCurUserIdListList([]);
};


/**
 * repeated uint32 chg_user_id_list = 6;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getChgUserIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setChgUserIdListList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.addChgUserIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.clearChgUserIdListList = function() {
  return this.setChgUserIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupChangeMemberRsp} returns this
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupChangeMemberRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupShieldReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupShieldReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupShieldReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupShieldReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shieldStatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupShieldReq}
 */
proto.IM.Group.IMGroupShieldReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupShieldReq;
  return proto.IM.Group.IMGroupShieldReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupShieldReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupShieldReq}
 */
proto.IM.Group.IMGroupShieldReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShieldStatus(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupShieldReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupShieldReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupShieldReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupShieldReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getShieldStatus();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupShieldReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupShieldReq} returns this
 */
proto.IM.Group.IMGroupShieldReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 group_id = 2;
 * @return {number}
 */
proto.IM.Group.IMGroupShieldReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupShieldReq} returns this
 */
proto.IM.Group.IMGroupShieldReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 shield_status = 3;
 * @return {number}
 */
proto.IM.Group.IMGroupShieldReq.prototype.getShieldStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupShieldReq} returns this
 */
proto.IM.Group.IMGroupShieldReq.prototype.setShieldStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupShieldReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupShieldReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupShieldReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupShieldReq} returns this
 */
proto.IM.Group.IMGroupShieldReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupShieldReq} returns this
 */
proto.IM.Group.IMGroupShieldReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupShieldReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupShieldRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupShieldRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupShieldRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupShieldRsp}
 */
proto.IM.Group.IMGroupShieldRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupShieldRsp;
  return proto.IM.Group.IMGroupShieldRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupShieldRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupShieldRsp}
 */
proto.IM.Group.IMGroupShieldRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupShieldRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupShieldRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupShieldRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getResultCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupShieldRsp} returns this
 */
proto.IM.Group.IMGroupShieldRsp.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 group_id = 2;
 * @return {number}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupShieldRsp} returns this
 */
proto.IM.Group.IMGroupShieldRsp.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 result_code = 3;
 * @return {number}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupShieldRsp} returns this
 */
proto.IM.Group.IMGroupShieldRsp.prototype.setResultCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Group.IMGroupShieldRsp} returns this
 */
proto.IM.Group.IMGroupShieldRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Group.IMGroupShieldRsp} returns this
 */
proto.IM.Group.IMGroupShieldRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Group.IMGroupShieldRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Group.IMGroupChangeMemberNotify.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Group.IMGroupChangeMemberNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Group.IMGroupChangeMemberNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupChangeMemberNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    changeType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    curUserIdListList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    chgUserIdListList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify}
 */
proto.IM.Group.IMGroupChangeMemberNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Group.IMGroupChangeMemberNotify;
  return proto.IM.Group.IMGroupChangeMemberNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Group.IMGroupChangeMemberNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify}
 */
proto.IM.Group.IMGroupChangeMemberNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.GroupModifyType} */ (reader.readEnum());
      msg.setChangeType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCurUserIdList(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addChgUserIdList(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Group.IMGroupChangeMemberNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Group.IMGroupChangeMemberNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Group.IMGroupChangeMemberNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChangeType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCurUserIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getChgUserIdListList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IM.BaseDefine.GroupModifyType change_type = 2;
 * @return {!proto.IM.BaseDefine.GroupModifyType}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.getChangeType = function() {
  return /** @type {!proto.IM.BaseDefine.GroupModifyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.IM.BaseDefine.GroupModifyType} value
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.setChangeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 group_id = 3;
 * @return {number}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated uint32 cur_user_id_list = 4;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.getCurUserIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.setCurUserIdListList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.addCurUserIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.clearCurUserIdListList = function() {
  return this.setCurUserIdListList([]);
};


/**
 * repeated uint32 chg_user_id_list = 5;
 * @return {!Array<number>}
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.getChgUserIdListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.setChgUserIdListList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.addChgUserIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IM.Group.IMGroupChangeMemberNotify} returns this
 */
proto.IM.Group.IMGroupChangeMemberNotify.prototype.clearChgUserIdListList = function() {
  return this.setChgUserIdListList([]);
};


goog.object.extend(exports, proto.IM.Group);
