// source: IM.Internal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.object.extend(proto, IM_BaseDefine_pb);
goog.exportSymbol('proto.IM.Internal.IMGetUserIdListByNickNameReq', null, global);
goog.exportSymbol('proto.IM.Internal.IMGetUserIdListByNickNameRsp', null, global);
goog.exportSymbol('proto.IM.Internal.IMSyncAuthInfoReq', null, global);
goog.exportSymbol('proto.IM.Internal.IMSyncAuthInfoRsp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Internal.IMSyncAuthInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Internal.IMSyncAuthInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Internal.IMSyncAuthInfoReq.displayName = 'proto.IM.Internal.IMSyncAuthInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Internal.IMSyncAuthInfoRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Internal.IMSyncAuthInfoRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Internal.IMSyncAuthInfoRsp.displayName = 'proto.IM.Internal.IMSyncAuthInfoRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Internal.IMGetUserIdListByNickNameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Internal.IMGetUserIdListByNickNameReq.displayName = 'proto.IM.Internal.IMGetUserIdListByNickNameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Internal.IMGetUserIdListByNickNameRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IM.Internal.IMGetUserIdListByNickNameRsp.displayName = 'proto.IM.Internal.IMGetUserIdListByNickNameRsp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Internal.IMSyncAuthInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Internal.IMSyncAuthInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMSyncAuthInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    latestTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Internal.IMSyncAuthInfoReq}
 */
proto.IM.Internal.IMSyncAuthInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Internal.IMSyncAuthInfoReq;
  return proto.IM.Internal.IMSyncAuthInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Internal.IMSyncAuthInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Internal.IMSyncAuthInfoReq}
 */
proto.IM.Internal.IMSyncAuthInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestTime(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Internal.IMSyncAuthInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Internal.IMSyncAuthInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMSyncAuthInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatestTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 latest_time = 1;
 * @return {number}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.getLatestTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Internal.IMSyncAuthInfoReq} returns this
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.setLatestTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Internal.IMSyncAuthInfoReq} returns this
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Internal.IMSyncAuthInfoReq} returns this
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Internal.IMSyncAuthInfoReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Internal.IMSyncAuthInfoRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Internal.IMSyncAuthInfoRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMSyncAuthInfoRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    latestTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authList: (f = msg.getAuthList()) && IM_BaseDefine_pb.AuthInfo.toObject(includeInstance, f),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Internal.IMSyncAuthInfoRsp;
  return proto.IM.Internal.IMSyncAuthInfoRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Internal.IMSyncAuthInfoRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestTime(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.AuthInfo;
      reader.readMessage(value,IM_BaseDefine_pb.AuthInfo.deserializeBinaryFromReader);
      msg.setAuthList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Internal.IMSyncAuthInfoRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Internal.IMSyncAuthInfoRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMSyncAuthInfoRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatestTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAuthList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      IM_BaseDefine_pb.AuthInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional uint32 latest_time = 1;
 * @return {number}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.getLatestTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp} returns this
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.setLatestTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IM.BaseDefine.AuthInfo auth_list = 2;
 * @return {?proto.IM.BaseDefine.AuthInfo}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.getAuthList = function() {
  return /** @type{?proto.IM.BaseDefine.AuthInfo} */ (
    jspb.Message.getWrapperField(this, IM_BaseDefine_pb.AuthInfo, 2));
};


/**
 * @param {?proto.IM.BaseDefine.AuthInfo|undefined} value
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp} returns this
*/
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.setAuthList = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp} returns this
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.clearAuthList = function() {
  return this.setAuthList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.hasAuthList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp} returns this
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Internal.IMSyncAuthInfoRsp} returns this
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Internal.IMSyncAuthInfoRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Internal.IMGetUserIdListByNickNameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Internal.IMGetUserIdListByNickNameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    nickNameList: jspb.Message.getFieldWithDefault(msg, 1, ""),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameReq}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Internal.IMGetUserIdListByNickNameReq;
  return proto.IM.Internal.IMGetUserIdListByNickNameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Internal.IMGetUserIdListByNickNameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameReq}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickNameList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Internal.IMGetUserIdListByNickNameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Internal.IMGetUserIdListByNickNameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNickNameList();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional string nick_name_list = 1;
 * @return {string}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.getNickNameList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameReq} returns this
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.setNickNameList = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameReq} returns this
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameReq} returns this
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Internal.IMGetUserIdListByNickNameReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Internal.IMGetUserIdListByNickNameRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userInfoList: (f = msg.getUserInfoList()) && IM_BaseDefine_pb.UserInfo.toObject(includeInstance, f),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameRsp}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Internal.IMGetUserIdListByNickNameRsp;
  return proto.IM.Internal.IMGetUserIdListByNickNameRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameRsp}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new IM_BaseDefine_pb.UserInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UserInfo.deserializeBinaryFromReader);
      msg.setUserInfoList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Internal.IMGetUserIdListByNickNameRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserInfoList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      IM_BaseDefine_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional IM.BaseDefine.UserInfo user_info_list = 1;
 * @return {?proto.IM.BaseDefine.UserInfo}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.getUserInfoList = function() {
  return /** @type{?proto.IM.BaseDefine.UserInfo} */ (
    jspb.Message.getWrapperField(this, IM_BaseDefine_pb.UserInfo, 1));
};


/**
 * @param {?proto.IM.BaseDefine.UserInfo|undefined} value
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} returns this
*/
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.setUserInfoList = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} returns this
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.clearUserInfoList = function() {
  return this.setUserInfoList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.hasUserInfoList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {string}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.getAttachData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} returns this
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.setAttachData = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IM.Internal.IMGetUserIdListByNickNameRsp} returns this
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.clearAttachData = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IM.Internal.IMGetUserIdListByNickNameRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.IM.Internal);
