// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Internal.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ImInternal.pbobjc.h"
#import "ImBaseDefine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AuthInfo);
GPBObjCClassDeclaration(UserInfo);

#pragma mark - ImInternalRoot

@implementation ImInternalRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ImInternalRoot_FileDescriptor

static GPBFileDescriptor *ImInternalRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"IM.Internal"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - IMSyncAuthInfoReq

@implementation IMSyncAuthInfoReq

@dynamic latestTime;
@dynamic hasAttachData, attachData;

typedef struct IMSyncAuthInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t latestTime;
  NSData *attachData;
} IMSyncAuthInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = IMSyncAuthInfoReq_FieldNumber_LatestTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMSyncAuthInfoReq__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.clazz = Nil,
        .number = IMSyncAuthInfoReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMSyncAuthInfoReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMSyncAuthInfoReq class]
                                     rootClass:[ImInternalRoot class]
                                          file:ImInternalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMSyncAuthInfoReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMSyncAuthInfoRsp

@implementation IMSyncAuthInfoRsp

@dynamic latestTime;
@dynamic hasAuthList, authList;
@dynamic hasAttachData, attachData;

typedef struct IMSyncAuthInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t latestTime;
  AuthInfo *authList;
  NSData *attachData;
} IMSyncAuthInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = IMSyncAuthInfoRsp_FieldNumber_LatestTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMSyncAuthInfoRsp__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "authList",
        .dataTypeSpecific.clazz = GPBObjCClass(AuthInfo),
        .number = IMSyncAuthInfoRsp_FieldNumber_AuthList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMSyncAuthInfoRsp__storage_, authList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.clazz = Nil,
        .number = IMSyncAuthInfoRsp_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMSyncAuthInfoRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMSyncAuthInfoRsp class]
                                     rootClass:[ImInternalRoot class]
                                          file:ImInternalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMSyncAuthInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGetUserIdListByNickNameReq

@implementation IMGetUserIdListByNickNameReq

@dynamic nickNameList;
@dynamic hasAttachData, attachData;

typedef struct IMGetUserIdListByNickNameReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickNameList;
  NSData *attachData;
} IMGetUserIdListByNickNameReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nickNameList",
        .dataTypeSpecific.clazz = Nil,
        .number = IMGetUserIdListByNickNameReq_FieldNumber_NickNameList,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGetUserIdListByNickNameReq__storage_, nickNameList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.clazz = Nil,
        .number = IMGetUserIdListByNickNameReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGetUserIdListByNickNameReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGetUserIdListByNickNameReq class]
                                     rootClass:[ImInternalRoot class]
                                          file:ImInternalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGetUserIdListByNickNameReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGetUserIdListByNickNameRsp

@implementation IMGetUserIdListByNickNameRsp

@dynamic hasUserInfoList, userInfoList;
@dynamic hasAttachData, attachData;

typedef struct IMGetUserIdListByNickNameRsp__storage_ {
  uint32_t _has_storage_[1];
  UserInfo *userInfoList;
  NSData *attachData;
} IMGetUserIdListByNickNameRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfoList",
        .dataTypeSpecific.clazz = GPBObjCClass(UserInfo),
        .number = IMGetUserIdListByNickNameRsp_FieldNumber_UserInfoList,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGetUserIdListByNickNameRsp__storage_, userInfoList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.clazz = Nil,
        .number = IMGetUserIdListByNickNameRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGetUserIdListByNickNameRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGetUserIdListByNickNameRsp class]
                                     rootClass:[ImInternalRoot class]
                                          file:ImInternalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGetUserIdListByNickNameRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
